// Automatically generated by tomatebase-cli

import { FsMappable } from "./fsMap";
import { IpcCall } from "./ipc";

export default class ShadowFsMap<Value extends FsMappable> {
  static className = 'FsMap';
  ipcCall: IpcCall;
  data: { path: string };
  entries: {
    [key: string]: Value;
  };
  constructor(
    ipcCall: IpcCall,
    data: {
      entries: { [key: string]: Value };
      data: { path: string };
    }
  ) {
    this.ipcCall = ipcCall;
    this.entries = data.entries;
    this.data = data.data;
  }
  get(id: string) {
    return this.entries[id];
  }

  async set(id: string, value: Omit<Value, 'id' | 'folder'>): Promise<void> {
    await this.ipcCall('db-function', 'set', [id, value]);
    let entry: any = value;
    entry.folder = `${this.data.path}/${id}`;
    entry.id = id;
    this.entries[id] = entry;
  }

  async remove(id: string, deleteFolder: boolean): Promise<void> {
    await this.ipcCall('db-function', 'remove', [id, deleteFolder]);
    delete this.entries[id];
  }

  list() {
    return Object.values(this.entries);
  }

  length() {
    return Object.keys(this.entries).length;
  }

  async add(value: Omit<Value, 'id'>): Promise<Value> {
    const entry = await this.ipcCall('db-function', 'add', [value]);
    this.entries[entry.id] = entry;
    return entry;
  }

  toJSON() {
    return this.ipcCall('db-function', 'toJSON', arguments);
  }
}
